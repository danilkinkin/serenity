/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 embient.glb --transform
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import {
  Color,
  DepthTexture,
  Group,
  Mesh,
  MeshBasicMaterial,
  RepeatWrapping,
  ShaderMaterial,
  TextureLoader,
  UniformsLib,
  UniformsUtils,
  UnsignedShortType,
  Vector2,
  WebGLRenderTarget,
  RGBAFormat,
  DoubleSide,
  MeshStandardMaterial,
  Vector3,
  ShaderLib,
  Material,
} from 'three'
import { useWindStore } from './windState'
import { Grass } from './Grass'
import { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise'
import { useSpring } from '@react-spring/three'
import waterFragmentShader from '@src/assests/water.fragmentShader.glsl?raw'
import waterVertexShader from '@src/assests/water.vertexShader.glsl?raw'
import waterSimpleFragmentShader from '@src/assests/waterSimple.fragmentShader.glsl?raw'
import waterSimpleVertexShader from '@src/assests/waterSimple.vertexShader.glsl?raw'
import { PerlinField } from './utils/PerlinField'

function powerOfTwo(x) {
  return Math.pow(2, Math.floor(Math.log(x) / Math.log(2)))
}

export function Model(props) {
  const { nodes, materials } = useGLTF('/objects/island.glb')
  const waterMeshRef = useRef<Mesh>(null)
  const waterFarMeshRef = useRef<Mesh>(null)
  const shipAnchorRef = useRef<Group>(null)
  const grassGroupRef = useRef<Group>(null)
  const commulutiveTimeOffset = useRef<number>(0)
  const [perlin] = useState(() => new ImprovedNoise())
  const { camera, gl, scene } = useThree()

  const windStore = useWindStore()
  const springsMove = useSpring({
    ...windStore[windStore.variant],
    config: {
      mass: 50,
      friction: 220,
      tension: 90,
    },
  })
  const springsAngle = useSpring({
    ...windStore[windStore.variant],
    config: {
      mass: 60,
      friction: 200,
      tension: 800,
    },
  })

  Object.values(materials).forEach((material: Material) => {
    material.toneMapped = false
  })

  const [{ renderTarget }] = useState(() => {
    const renderTarget = new WebGLRenderTarget(1000, 1000)
    renderTarget.texture.format = RGBAFormat
    renderTarget.texture.generateMipmaps = false
    renderTarget.stencilBuffer = false
    renderTarget.depthBuffer = true
    renderTarget.depthTexture = new DepthTexture(1000, 1000)
    renderTarget.depthTexture.type = UnsignedShortType

    return { renderTarget }
  })

  const [{ waterMaterial, waterSimpleMaterial, depthMaterial }] = useState(
    () => {
      const textureLoader = new TextureLoader()
      var dudvMap = textureLoader.load('https://i.imgur.com/hOIsXiZ.png')
      dudvMap.wrapS = dudvMap.wrapT = RepeatWrapping

      var uniforms = {
        ...ShaderLib['standard'].uniforms,
        resolution: {
          value: new Vector2(),
        },
        depth_map: {
          value: renderTarget.depthTexture,
        },
        map: {
          value: null,
        },
        camera_near: {
          value: 0,
        },
        camera_far: {
          value: 0,
        },
        uTime: {
          value: 0,
        },
        uWind: {
          value: 1,
        },
        color_foam: {
          value: new Color(0xffffff),
        },
        color_shallow: {
          value: new Color(0x14c6a5),
        },
        color_deep: {
          value: new Color(0x49B2B0),
        },
        opacity_shallow: {
          value: 0.2,
        },
        opacity_deep: {
          value: 1.0,
        },
        opacity_foam: {
          value: 0.8,
        },
        repeat: {
          value: 100,
        },
        max_depth: {
          value: 4,
        },
      }

      var waterMaterial = new ShaderMaterial({
        uniforms: UniformsUtils.merge([UniformsLib['fog'], UniformsLib['lights'], uniforms]),
        vertexShader: waterVertexShader,
        fragmentShader: waterFragmentShader,
        transparent: true,
        //wireframe: true,
        fog: true,
        lights:true,
      })

      waterMaterial.uniforms.diffuse.value = new Color(0x00ffff);
      waterMaterial.uniforms.roughness.value = 1;
      waterMaterial.uniforms.metalness.value = 1;

      const depthMaterial = new MeshBasicMaterial({
        colorWrite: false,
      })

      var waterSimpleMaterial = new ShaderMaterial({
        uniforms: UniformsUtils.merge([UniformsLib['fog'], uniforms]),
        vertexShader: waterSimpleVertexShader,
        fragmentShader: waterSimpleFragmentShader,
        transparent: true,
        //wireframe: true,
        fog: true,
      })

      return { waterMaterial, waterSimpleMaterial, depthMaterial }
    }
  )

  const getMaterial = (name: string) => {
    materials[name].side = DoubleSide
    materials[name].alphaTest = 0
    materials[name].depthWrite = false
    materials[name].transparent = true
    materials[name].needsUpdate = true

    return materials[name]
  }

  useFrame((state) => {
    const moveFactor = springsMove.speed.get() * springsMove.force.get()
    const angleFactor = springsAngle.speed.get() * springsAngle.force.get()

    commulutiveTimeOffset.current += moveFactor / 100000
    waterMaterial.uniforms.uWind.value = moveFactor / 300

    // waterMeshRef.current.position.y = 0.03 + 0.05 * Math.sin(state.clock.elapsedTime)
    shipAnchorRef.current.position.x = moveFactor / 30000
    shipAnchorRef.current.position.y = 0.05 * Math.sin(state.clock.elapsedTime)
    shipAnchorRef.current.rotation.z =
      0.05 * Math.sin(state.clock.elapsedTime * 2) + angleFactor / 40000
    shipAnchorRef.current.rotation.z =
      0.05 * Math.sin(state.clock.elapsedTime * 1.5) * 2
  })

  useFrame(({ gl, clock }) => {
    waterMaterial.uniforms.camera_near.value = camera.near
    waterMaterial.uniforms.camera_far.value = camera.far
    waterMaterial.uniforms.uTime.value =
      clock.elapsedTime + commulutiveTimeOffset.current

    const temp = new Vector2()

    gl.getDrawingBufferSize(temp)
    waterMaterial.uniforms.resolution.value = temp
    renderTarget.setSize(powerOfTwo(temp.x), powerOfTwo(temp.y))

    waterMeshRef.current.visible = false
    //waterFarMeshRef.current.visible = false
    grassGroupRef.current.visible = false
    gl.setRenderTarget(renderTarget)
    scene.overrideMaterial = depthMaterial

    gl.render(scene, camera)

    gl.setRenderTarget(null)
    waterMeshRef.current.visible = true
    //waterFarMeshRef.current.visible = true
    grassGroupRef.current.visible = true
    scene.overrideMaterial = null
  }, -1)

  return (
    <group {...props} dispose={null}>
      {/* Water */}
      {/* <mesh
        ref={waterMeshRef}
        material={waterMaterial || materials.ocean}
        rotation={[-Math.PI / 2, 0, 0]}
        position={[0.245, 0.081, 0.663]}
      >
        <planeGeometry args={[27.5, 27.5, 100, 100]} />
      </mesh> */}
      <mesh geometry={nodes.ocean.geometry} ref={waterMeshRef} material={materials.ocean} position={[0.245, 0.081, 0.663]} />
      <mesh geometry={nodes.ocean_sky_box.geometry} material={materials['Material.001']} position={[0.245, -9.646, 0.663]} />
      {/* Terrain */}
      <group ref={grassGroupRef}>
        <PerlinField perlin={perlin}>
          <Grass quality={6} resistance={2} geometry={nodes.leaf_1_1.geometry} material={materials['Group 11']} position={[-0.731, 3.696, 3.052]} rotation={[1.635, 0.162, -1.897]} />
          
          <Grass quality={6} resistance={2} geometry={nodes.leaf_2_1.geometry} material={materials['Group 2']} position={[0.614, 3.435, 4.72]} rotation={[1.575, 0.022, -1.792]} />
          <Grass quality={6} resistance={2} geometry={nodes.leaf_2_2.geometry} material={materials.leaf_2_2} position={[-0.407, 2.057, 2.316]} rotation={[1.261, 0.066, -1.774]} />

          <Grass quality={6} resistance={2} geometry={nodes.leaf_3_1.geometry} material={materials['Group 3']} position={[0.785, 3.855, 4.316]} rotation={[1.587, -0.034, -1.885]} />
          <Grass quality={6} resistance={2} geometry={nodes.leaf_3_2.geometry} material={materials.leaf_3_2} position={[2.102, 2.504, 4.669]} rotation={[1.509, -0.008, -2.072]} />
          <Grass quality={6} resistance={2} geometry={nodes.leaf_3_3.geometry} material={materials.leaf_3_3} position={[-0.344, 2.233, 3.004]} rotation={[1.598, 0.108, -1.887]} />

          <Grass quality={3} resistance={1} geometry={nodes.leaf_4_1.geometry} material={materials.leaf_4_1} position={[5.861, 1.401, 2.813]} rotation={[1.47, 0.036, -1.882]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_4_2.geometry} material={materials.leaf_4_2} position={[6.194, 1.406, 3.589]} rotation={[1.645, -0.023, -2.059]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_4_5.geometry} material={materials.leaf_4_5} position={[4.688, 1.367, 4.314]} rotation={[1.503, -0.251, -2.38]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_4_6.geometry} material={materials.leaf_4_6} position={[5.645, 1.452, 3.053]} rotation={[Math.PI / 2, 0, -2.057]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_4_7.geometry} material={materials.leaf_4_7} position={[6.034, 1.38, 2.971]} rotation={[1.413, 0.06, -2.018]} />

          <Grass quality={3} resistance={2} geometry={nodes.leaf_5_1.geometry} material={materials.leaf_5_1} position={[-0.968, 0.996, 1.466]} rotation={[1.673, -0.01, -1.919]} />
          <Grass quality={3} resistance={2} geometry={nodes.leaf_5_2.geometry} material={materials.leaf_5_2} position={[2.576, 1.257, 3.36]} rotation={[1.313, 0.08, -1.843]} />
          <Grass quality={3} resistance={2} geometry={nodes.leaf_5_3.geometry} material={materials.leaf_5_3} position={[-0.87, 0.896, 1.209]} rotation={[1.412, 0.049, -1.893]} />
          <Grass quality={3} resistance={2} geometry={nodes.leaf_5_4.geometry} material={materials.leaf_5_4} position={[-0.617, 0.741, 1.442]} rotation={[Math.PI / 2, 0, -1.907]} />

          <Grass quality={3} resistance={2} geometry={nodes.leaf_6_1.geometry} material={materials.leaf_6_1} position={[0.449, 1.032, 1.91]} rotation={[1.555, -0.081, -1.931]} />
          <Grass quality={3} resistance={2} geometry={nodes.leaf_6_2.geometry} material={materials.leaf_6_2} position={[-0.028, 0.895, 2.021]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={2} geometry={nodes.leaf_6_3.geometry} material={materials.leaf_6_3} position={[0.04, 0.932, 1.741]} rotation={[1.584, 0.079, -1.884]} />

          <Grass quality={3} resistance={1} geometry={nodes.leaf_7_1.geometry} material={materials.leaf_7_1} position={[-3.83, 0.489, -4.904]} rotation={[1.503, 0.121, -1.741]} scale={3.034} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_7_2.geometry} material={materials.leaf_7_2} position={[-3.787, 0.492, -4.916]} rotation={[1.498, 0.035, -1.746]} scale={3.034} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_7_3.geometry} material={materials.leaf_7_3} position={[-3.698, 0.512, -4.739]} rotation={[1.48, -0.041, -1.753]} scale={3.034} />

          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_1.geometry} material={materials.leaf_8_1} position={[6.251, 1.274, 3.405]} rotation={[1.822, -0.099, -1.998]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_1.geometry} material={materials.leaf_8_1} position={[3.744, 1.144, 3.39]} rotation={[1.822, -0.099, -1.998]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_2.geometry} material={materials.leaf_8_2} position={[-5.644, 0.414, -0.553]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_2.geometry} material={materials.leaf_8_2} position={[-3.783, 0.481, -3.956]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_2.geometry} material={materials.leaf_8_2} position={[-0.328, 0.743, 2.350]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_3.geometry} material={materials.leaf_8_3} position={[5.925, 1.297, 2.675]} rotation={[1.341, 0.141, -1.781]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_3.geometry} material={materials.leaf_8_3} position={[-5.466, 0.355, -0.988]} rotation={[1.341, 0.141, -1.781]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_3.geometry} material={materials.leaf_8_3} position={[-3.517, 0.393, -4.461]} rotation={[1.341, 0.141, -1.781]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_3.geometry} material={materials.leaf_8_3} position={[2.356, 0.989, 2.376]} rotation={[1.341, 0.141, -1.781]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_3.geometry} material={materials.leaf_8_3} position={[3.776, 1.076, 3.336]} rotation={[1.341, 0.141, -1.781]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_4.geometry} material={materials.leaf_8_4} position={[5.8, 1.299, 3.704]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_4.geometry} material={materials.leaf_8_4} position={[-5.324, 0.372, -0.739]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_4.geometry} material={materials.leaf_8_4} position={[-3.208, 0.409, -4.264]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_4.geometry} material={materials.leaf_8_4} position={[1.008, 0.833, 2.092]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_4.geometry} material={materials.leaf_8_4} position={[2.852, 1.056, 3.316]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_5.geometry} material={materials.leaf_8_5} position={[-4.802, 0.536, -0.039]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_5.geometry} material={materials.leaf_8_5} position={[-4.104, 0.465, -4.981]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_5.geometry} material={materials.leaf_8_5} position={[0.417, 0.8, 1.144]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_6.geometry} material={materials.leaf_8_6} position={[-4.919, 0.507, 0.177]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_6.geometry} material={materials.leaf_8_6} position={[-4.187, 0.469, -4.637]} rotation={[Math.PI / 2, 0, -1.907]} />
          <Grass quality={3} resistance={1} geometry={nodes.leaf_8_6.geometry} material={materials.leaf_8_6} position={[0.321, 0.805, 1.363]} rotation={[Math.PI / 2, 0, -1.907]} />

          <mesh geometry={nodes.leaf_9_1.geometry} material={materials['Group 13']} position={[-3.13, 0.274, -4.201]} rotation={[1.581, 0.06, -1.606]} />
          <instancedMesh args={[nodes.Group_13001.geometry, materials['Group 13'], 11]} instanceMatrix={nodes.Group_13001.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13002.geometry, materials['Group 13'], 7]} instanceMatrix={nodes.Group_13002.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13003.geometry, materials['Group 13'], 6]} instanceMatrix={nodes.Group_13003.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13044.geometry, materials['Group 13'], 6]} instanceMatrix={nodes.Group_13044.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13066.geometry, materials['Group 13'], 7]} instanceMatrix={nodes.Group_13066.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13068.geometry, materials['Group 13'], 5]} instanceMatrix={nodes.Group_13068.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13071.geometry, materials['Group 13'], 7]} instanceMatrix={nodes.Group_13071.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13076.geometry, materials['Group 13'], 5]} instanceMatrix={nodes.Group_13076.instanceMatrix} />
          <instancedMesh args={[nodes.Group_13088.geometry, materials['Group 13'], 6]} instanceMatrix={nodes.Group_13088.instanceMatrix} />
        </PerlinField>
      </group>
      <mesh geometry={nodes.stones.geometry} material={materials.rocks} position={[-3.247, 0.235, -4.361]} rotation={[-1.022, 0.174, 0.315]} />
      <mesh geometry={nodes.terrain.geometry} material={materials.terrain}  />
      {/* Lighthouse */}
      <mesh geometry={nodes.lighthouse.geometry} material={materials.lighthouse} position={[4.027, 1.7, 4.045]} rotation={[0, -0.211, 0]} />
      <mesh geometry={nodes.barrel_3.geometry} material={materials.barrel} position={[3.055, 0.993, 3.225]} scale={0.1} />
      <mesh geometry={nodes.box_2.geometry} material={materials.box} position={[3.264, 1.003, 3.32]} scale={0.087} />
      <mesh geometry={nodes.dock.geometry} material={materials.dock} position={[-0.938, 0.219, -3.218]} rotation={[0, -0.543, 0]} />
      {/* Ship */}
      <group position={[0.968, 0.039, -4.976]}>
        <group rotation={[0, -0.708, 0]}>
          <group ref={shipAnchorRef}>
            <group rotation={[0, 0.708, 0]}>
              <group position={[-0.968, -0.039, 4.976]}>
                <mesh geometry={nodes.string.geometry} material={materials['Material.014']} position={[0.708, 0.183, -4.669]} rotation={[0.001, -0.145, -0.003]} />
                <mesh geometry={nodes.ship.geometry} material={materials.ship} position={[0.717, 0.223, -4.68]} rotation={[1.572, -0.003, -0.87]} />
                <mesh geometry={nodes.lifebuoy_1.geometry} material={materials.circle} position={[1.396, 0.226, -5.109]} rotation={[-0.213, -0.189, -1.751]} />
                <mesh geometry={nodes.ship_origin.geometry} material={nodes.ship_origin.material} position={[0.968, 0.039, -4.976]} rotation={[0, -0.708, 0]} />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/objects/island.glb')
